// ticket-service/src/main.ts
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { MicroserviceOptions, Transport } from '@nestjs/microservices';
import { ValidationPipe } from '@nestjs/common';

async function bootstrap() {
  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á hybrid application (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á HTTP ‡πÅ‡∏•‡∏∞ Kafka)
  const app = await NestFactory.create(AppModule);
  
  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ validation
  app.useGlobalPipes(new ValidationPipe({
    transform: true,
    whitelist: true,
  }));

  // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Kafka microservice
  app.connectMicroservice<MicroserviceOptions>({
    transport: Transport.KAFKA,
    options: {
      client: {
        clientId: 'ticket-service',
        brokers: [process.env.KAFKA_BROKERS || 'localhost:9092'],
      },
      consumer: {
        groupId: 'ticket-service-group',
      },
    },
  });

  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ CORS
  app.enableCors({
    origin: process.env.CORS_ORIGINS?.split(',') || ['http://localhost:3000'],
    credentials: true,
  });

  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° microservices
  await app.startAllMicroservices();
  console.log('üé´ Ticket Service microservice is running on Kafka');

  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° HTTP server (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö direct access ‡∏´‡∏£‡∏∑‡∏≠ debugging)
  const port = process.env.PORT || 3003;
  await app.listen(port);
  console.log(`üåê Ticket Service HTTP server is running on port ${port}`);
}

bootstrap().catch(err => {
  console.error('‚ùå Failed to start Ticket Service:', err);
  process.exit(1);
});